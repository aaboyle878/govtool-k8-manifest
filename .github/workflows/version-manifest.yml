name: Version Kubernetes Manifests

on:
  push:
    branches:
      - main
    paths-ignore:
      - "govtool/**/_v*.yaml"

jobs:
  version_manifests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}

      - name: Setup Git with GITHUB_TOKEN
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Get Changed Manifests
        id: changed_files
        run: |
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD -- 'govtool/**/*.yaml' || \
              git diff --name-only --cached -- 'govtool/**/*.yaml' || true)

          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No YAML files changed. Skipping workflow."
            exit 0
          fi

          echo "files<<EOF" >> "$GITHUB_ENV"
          echo "$CHANGED_FILES" | tr ' ' '\n' >> "$GITHUB_ENV"
          echo "EOF" >> "$GITHUB_ENV"
          echo "Changed files:"
          echo "$CHANGED_FILES"

      - name: Debug Changed Files
        run: |
          echo "Changed files:"
          echo "$files"

      - name: Version and Retain Manifests
        run: |
          MAX_VERSIONS=20

          if [[ -z "$files" ]]; then
            echo "No changed files detected. Exiting."
            exit 0
          fi

          while IFS= read -r FILE; do
            [ -f "$FILE" ] || { echo "File $FILE does not exist, skipping..."; continue; }

            DIR=$(dirname "$FILE")
            BASENAME=$(basename "$FILE" .yaml)
            CLEAN_NAME=$(echo "$BASENAME" | sed -E 's/_v[0-9]+$//')

            cd "$DIR" || exit

            # Find existing versions
            VERSIONS=($(ls -v ${CLEAN_NAME}_v*.yaml 2>/dev/null))

            # Determine next version
            if [ ${#VERSIONS[@]} -eq 0 ]; then
              NEXT_VERSION=1
            else
              LATEST_VERSION=$(echo "${VERSIONS[-1]}" | grep -o '_v[0-9]\+' | sed 's/_v//g' | tail -n1)
              NEXT_VERSION=$((LATEST_VERSION + 1))
            fi

            # Ensure the original file exists
            if [ ! -f "$CLEAN_NAME.yaml" ]; then
              echo "Original file $CLEAN_NAME.yaml not found, skipping..."
              continue
            fi

            # Copy and version the file
            NEW_VERSION_FILE="${CLEAN_NAME}_v${NEXT_VERSION}.yaml"
            cp "$CLEAN_NAME.yaml" "$NEW_VERSION_FILE"
            echo "Created: $NEW_VERSION_FILE"

            # Keep only the last MAX_VERSIONS
            VERSIONS=($(ls -v ${CLEAN_NAME}_v*.yaml 2>/dev/null))
            if [ ${#VERSIONS[@]} -gt $MAX_VERSIONS ]; then
              DELETE_COUNT=$(( ${#VERSIONS[@]} - MAX_VERSIONS ))
              for ((i=0; i<DELETE_COUNT; i++)); do
                rm -f "${VERSIONS[$i]}"
                echo "Deleted old version: ${VERSIONS[$i]}"
              done
            fi

            cd - || exit
          done <<< "$files"

      - name: Commit and Push Changes
        run: |
          if ! git ls-files --error-unmatch govtool/**/_v*.yaml >/dev/null 2>&1; then
            echo "No versioned files created. Exiting."
            exit 0
          fi

          git add -f govtool/**/_v*.yaml
          git commit -m "Versioned changed Kubernetes manifests and retained last 20"
          git push origin main
