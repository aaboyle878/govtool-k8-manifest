name: Version Kubernetes Manifests

on:
  push:
    branches:
      - main
    if: "github.event.head_commit.message !~ 'Versioned changed Kubernetes manifests' || github.actor != 'github-actions[bot]'"

jobs:
  version_manifests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 
          token: ${{ secrets.TOKEN }}

      - name: Setup Git with GITHUB_TOKEN
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Get Changed Manifests
        id: changed_files
        run: |
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD -- 'govtool/preview/*.yaml' 'govtool/mainnet/*.yaml' || \
                            git diff --name-only --cached -- 'govtool/preview/*.yaml' 'govtool/mainnet/*.yaml' || true)
            if [[ -z "$CHANGED_FILES" ]]; then
              echo "No YAML files changed. Skipping workflow."
              exit 0
            fi
            echo "Changed files:"
            echo "$CHANGED_FILES"
  
            echo "files=$CHANGED_FILES" >> "$GITHUB_ENV"
  
      - name: Version and Retain Manifests
        run: |
            MAX_VERSIONS=20

            for FILE in ${{ env.files }}; do
              [ -f "$FILE" ] || continue  # Skip if file doesn't exist

              DIR=$(dirname "$FILE")
              BASENAME=$(basename "$FILE" .yaml)

              cd "$DIR"

              # Get sorted list of versioned files
              VERSIONS=($(ls -v ${BASENAME}_v*.yaml 2>/dev/null))

              # Determine next version number
              if [ ${#VERSIONS[@]} -eq 0 ]; then
                NEXT_VERSION=1
              else
                # Extract the latest version number correctly
                LATEST_VERSION=$(echo "${VERSIONS[-1]}" | grep -o '_v[0-9]\+' | sed 's/_v//g' | tail -n1)
                
                # Ensure it's a valid number before incrementing
                if [[ -n "$LATEST_VERSION" && "$LATEST_VERSION" =~ ^[0-9]+$ ]]; then
                  NEXT_VERSION=$((LATEST_VERSION + 1))
                else
                  NEXT_VERSION=1  # Fallback in case of unexpected formatting
                fi
              fi

              # Rename the current file with the new version
              mv "$BASENAME.yaml" "${BASENAME}_v${NEXT_VERSION}.yaml"

              # Keep only the last MAX_VERSIONS
              VERSIONS=($(ls -v ${BASENAME}_v*.yaml 2>/dev/null))
              if [ ${#VERSIONS[@]} -gt $MAX_VERSIONS ]; then
                DELETE_COUNT=$(( ${#VERSIONS[@]} - MAX_VERSIONS ))
                for ((i=0; i<DELETE_COUNT; i++)); do
                  rm -f "${VERSIONS[$i]}"
                done
              fi

              cd -  # Return to repo root
            done


      - name: Commit and Push Changes
        run: |
          git add .
          git commit -m "Versioned changed Kubernetes manifests and retained last 20"
          git push
