name: Version Kubernetes Manifests

on:
  push:
    branches:
      - main
    paths-ignore:
      - "govtool/**/_v*.yaml"

jobs:
  version_manifests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN }}

      - name: Setup Git with GITHUB_TOKEN
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Get Changed Manifests
        id: changed_files
        run: |
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD -- 'govtool/**/*.yaml' || \
                git diff --name-only --cached -- 'govtool/**/*.yaml' || true)
        
            if [[ -z "$CHANGED_FILES" ]]; then
              echo "No YAML files changed. Skipping workflow."
              exit 0
            fi
        
            # Convert newlines to spaces for correct Bash array handling
            CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')
        
            # Save to environment
            echo "files=$CHANGED_FILES" >> "$GITHUB_ENV"
        
            echo "Changed files: $CHANGED_FILES"

      - name: Debug Changed Files
        run: |
          echo "Changed files:"
          echo "$files"

      - name: Version and Retain Manifests
        run: |
          MAX_VERSIONS=20

          if [[ -z "$files" ]]; then
            echo "No changed files detected. Exiting."
            exit 0
          fi

          IFS=' ' read -r -a FILES <<< "$files"

          echo "Processing files: ${FILES[@]}"

          for FILE in "${FILES[@]}"; do
            echo "Checking: $FILE"

            if [ ! -f "$FILE" ]; then
              echo "❌ File $FILE does not exist, skipping..."
              continue
            fi

            DIR=$(dirname "$FILE")
            BASENAME=$(basename "$FILE" .yaml)
            CLEAN_NAME=$(echo "$BASENAME" | sed -E 's/_v[0-9]+$//')

            echo "DIR: $DIR, BASENAME: $BASENAME, CLEAN_NAME: $CLEAN_NAME"

            if [ ! -d "$DIR" ]; then
              echo "❌ Directory $DIR does not exist. Skipping..."
              continue
            fi

            cd "$DIR" || { echo "❌ Failed to cd into $DIR"; exit 2; }

            echo "Current directory: $(pwd)"

            # Find existing versions
            VERSIONS=($(ls -v ${CLEAN_NAME}_v*.yaml 2>/dev/null || true))

            echo "Found versions: ${VERSIONS[@]}"

            if [ ${#VERSIONS[@]} -eq 0 ]; then
              NEXT_VERSION=1
            else
              LATEST_VERSION=$(echo "${VERSIONS[-1]}" | grep -o '_v[0-9]\+' | sed 's/_v//g' | tail -n1)
              NEXT_VERSION=$((LATEST_VERSION + 1))
            fi

            echo "Next version: $NEXT_VERSION"

            if [ ! -f "$CLEAN_NAME.yaml" ]; then
              echo "❌ Original file $CLEAN_NAME.yaml not found, skipping..."
              continue
            fi

            NEW_VERSION_FILE="${CLEAN_NAME}_v${NEXT_VERSION}.yaml"
            echo "Creating new version: $NEW_VERSION_FILE"

            cp "$CLEAN_NAME.yaml" "$NEW_VERSION_FILE" || { echo "❌ Failed to copy file"; exit 2; }

            # Keep only the last MAX_VERSIONS
            VERSIONS=($(ls -v ${CLEAN_NAME}_v*.yaml 2>/dev/null || true))

            if [ ${#VERSIONS[@]} -gt $MAX_VERSIONS ]; then
              DELETE_COUNT=$(( ${#VERSIONS[@]} - MAX_VERSIONS ))
              for ((i=0; i<DELETE_COUNT; i++)); do
                echo "Deleting old version: ${VERSIONS[$i]}"
                rm -f "${VERSIONS[$i]}" || { echo "❌ Failed to delete ${VERSIONS[$i]}"; exit 2; }
              done
            fi

            cd - || { echo "❌ Failed to return to previous directory"; exit 2; }
          done

          
      - name: Commit and Push Changes
        run: |
          git add -f govtool/**/_v*.yaml
          git commit -m "Versioned changed Kubernetes manifests and retained last 20"
          if ! git ls-files --error-unmatch govtool/**/_v*.yaml >/dev/null 2>&1; then
            echo "No versioned files created. Exiting."
            exit 0
          fi
          git push origin main
